#!/usr/bin/env ruby
# /* Copyright 2013 Proofpoint, Inc. All rights reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# */


$LOAD_PATH.unshift('/opt/pptools')
require 'ppenv'
require 'optconfig'
require 'ppinventory'
require 'rubygems'
require 'json'
require 'yaml'
require 'syslog'

$version = '__VERSION__'
$me = 'factloader'

$manpage = <<EOF
=head1 NAME

factloader - Load facts from Puppet YAML files into Inventory

=head1 SYNOPSIS

   factloader { --factpath path | file } [file [...]]
      --nocheck-expiry  Don't check expiration date
      --factpath        Specify directory full of *.yaml files
      --trafficcontrol  Specify trafficcontrol parameter
         url=           Specify trafficcontrol URL
         username=      Specify trafficcontrol Username
         password=      Specify trafficcontrol password
      Other options as outlined in Optconfig

=head1 DESCRIPTION

=head1 AUTHOR

Jeremy Brinkley, E<lt>jbrinkley@proofpoint.comE<gt>

=cut
EOF

$opt = Optconfig.new($me, {
                        'factpath=s' => nil,
                        'check-expiry!' => true,
                        'add=s%' => {
                           'agent_type' => $me + '/' + $version,
                           'inventory_component_type' => 'system' },
                        'trafficcontrol=s%' => {
                           'url' => 'http://trafficcontrol/api/v1/fact' },
                        'keymap=s%' => { } })

def vrb(msg)
   Syslog.log(Syslog::LOG_INFO, msg)
   if $opt['verbose'].to_i >= 1
      puts msg
   end
end

def wrn(msg)
   Syslog.log(Syslog::LOG_WARNING, msg)
   $stderr.puts msg
end

def dbg(msg)
   if $opt['debug'] > 0
      Syslog.log(Syslog::LOG_DEBUG, msg)
      puts "DBG(#{$me}): #{msg}"
   end
end

def get_facts(file)
   File.open(file, 'r') { |fh| YAML.load(fh).ivars }
end

def current?(fact)
   dbg "Considering #{fact['expiration']} vs #{Time.now()}"
   if $opt['check-expiry']
      fact['expiration'] > Time.now()
   else
      true
   end
end

def get_files(path)
   Dir.entries(path).select { |e| /\.yaml$/.match(e) }.map { |f|
      File.join(path, f) }
end

def gather_facts(files)
   dbg "Files: #{files.join(', ')}"
   facts = files.map { |f| File.open(f, 'r') { |fh| YAML.load(fh).ivars } }
   dbg "All facts: #{facts.inspect}"
   rfacts = facts.select { |fact| current?(fact) }.map { |fact| fact['values'] }
   dbg "Current facts: #{rfacts.inspect}"
   rfacts
end

def map_keys(keymap, factset)
   xmap = { }
   factset.each do |k, v|
      if keymap.has_key? k
         dbg "   mapping #{k} -> #{keymap[k]} = #{v}"
         xmap[keymap[k]] = v
      end
   end
   dbg "merging into #{xmap.inspect}"
   xmap.merge(factset)
end

Syslog.open($me, Syslog::LOG_NDELAY | Syslog::LOG_PID,
       Syslog::LOG_DAEMON)

if $opt['factpath'].nil?
   files = [ ]
else
   vrb "Scanning #{$opt['factpath']}"
   files = get_files($opt['factpath'])
end

files = files + ARGV

facts = gather_facts(files)

inv = PPInventory.new($opt)

facts.each do |rawfactset|
   factset = map_keys($opt['keymap'], rawfactset).merge($opt['add'])
   id = factset['fqdn']
   vrb "Updating facts for #{id}"
   begin
      inv.tc_post(factset) unless $opt['dry-run']
   rescue => e
      wrn "Error updating facts for #{id}: #{e}"
   end
end
